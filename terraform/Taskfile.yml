version: '3'

vars:
  TASK_RUNTIME: docker
  TRIVY_IMAGE_TAG: "0.51.1"
  CHECKOV_IMAGE_TAG: "3.2.92"
  TFLINT_IMAGE_TAG: "v0.51.1"
  TERRASCAN_IMAGE_TAG: "1.18.11"
  TERRAFORM_IMAGE_TAG: "1.8.3"


tasks:
  init:
    summary: Run terraform init
    desc: terraform init
    silent: true
    internal: true
    preconditions:
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which terraform{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that terraform have been installed
          https://github.com/hashicorp/terraform
          {{end}}
    cmds:
      - '{{if eq .TASK_RUNTIME "docker"}}docker run -v $PWD:/project hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}} -chdir=/project init{{else}}terraform init .{{end}}'
    requires:
      vars: [GITLAB_TOKEN]

  plan:
    summary: Run terraform plan
    desc: terraform plan
    silent: true
    deps: [init]
    preconditions:
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which terraform{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that terraform have been installed
          https://github.com/hashicorp/terraform
          {{end}}
    cmds:
      - '{{if eq .TASK_RUNTIME "docker"}}docker run -v $PWD:/project hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}} -chdir=/project plan {{else}}terraform plan{{end}}'
    requires:
      vars: [GITLAB_TOKEN]

  apply:
    summary: Run terraform apply -auto-approve
    desc: terraform apply -auto-approve
    silent: true
    deps: [init]
    preconditions:
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which terraform{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that terraform have been installed
          https://github.com/hashicorp/terraform
          {{end}}
    cmds:
      - '{{if eq .TASK_RUNTIME "docker"}}docker run -v $PWD:/project hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}} -chdir=/project apply -auto-approve{{else}}terraform apply -auto-approve{{end}}'
    requires:
      vars: [GITLAB_TOKEN]

  destroy:
    summary: Run terraform destroy -auto-approve
    desc: terraform destroy
    silent: true
    deps: [init]
    preconditions:
      - test -f terraform.tfstate
      - test -d .terraform
      - test -f .terraform.lock.hcl
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which terraform{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that terraform have been installed
          https://github.com/hashicorp/terraform
          {{end}}
    cmds:
      - '{{if eq .TASK_RUNTIME "docker"}}docker run -v $PWD:/project hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}} -chdir=/project destroy -auto-approve{{else}}terraform destroy -auto-approve{{end}}'
    requires:
      vars: [GITLAB_TOKEN]
  
  fmt:
    summary: Run terraform fmt
    desc: terraform fmt
    silent: true
    cmds:
      - terraform fmt .

  validate:
    summary: Run terraform validate
    desc: terraform validate
    silent: true
    cmds:
      - terraform validate .

  doc:
    summary: Make terraform documentation
    desc: terraform-docs
    silent: true
    cmds:
      - terraform-docs markdown table --output-file README.md .

  terrascan:
    summary: Run Terrascan static code analyzer
    desc: Terrascan static code analyzer
    preconditions:
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which terrascan{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that terrascan have been installed
          https://github.com/tenable/terrascan
          {{end}}
    cmds:
      - '{{if eq .TASK_RUNTIME "docker"}}docker run -v $PWD:/myapp tenable/terrascan:{{.TERRASCAN_IMAGE_TAG}} .{{else}}terrascan scan .{{end}}'

  trivy:
    summary: Run Trivy static code analyzer
    desc: Trivy static code analyzer
    preconditions:
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which trivy{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that trivy have been installed
          https://github.com/aquasecurity/trivy
          {{end}}
    cmds:
      - '{{if eq .TASK_RUNTIME "docker"}}docker run -v $PWD:/myapp aquasec/trivy:{{.TRIVY_IMAGE_TAG}} config .{{else}}trivy config .{{end}}'

  checkov:
    summary: Run Checkov static code analyzer
    desc: Checkov static code analyzer
    preconditions:
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which checkov{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that checkov have been installed
          https://github.com/bridgecrewio/checkov
          {{end}}
    cmds:
      - '{{if eq .TASK_RUNTIME "docker"}}docker run --tty --volume /user/tf:/tf --workdir /tf bridgecrew/checkov:{{.CHECKOV_IMAGE_TAG}} --directory /tf{{else}}checkov --directory .{{end}}'

  tflint:
    summary: Run terraform linting by tflint
    desc: tflint 
    preconditions:
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which tflint{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that tflint have been installed
          https://github.com/terraform-linters/tflint
          {{end}}
    cmds:
      - '{{if eq .TASK_RUNTIME "docker"}}docker run --rm -v $(pwd):/data -t ghcr.io/terraform-linters/tflint:{{.TFLINT_IMAGE_TAG}}{{else}}tflint --chdir .{{end}}'

  test:
    desc: run format,validate,lint,create a doc,secure tests
    summary: |
      Make terraform tests.

      It will format, validate, lint, create a doc and make secure analize.
    cmds:
      - for: [fmt, validate, doc, tflint, terrascan, trivy, checkov]
        task: '{{.ITEM}}'
