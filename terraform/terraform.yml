---
preconditions:
  - &TASK_RUNTIME_VAR
    sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which terraform{{end}}'
    msg: |
      {{if eq .TASK_RUNTIME "docker"}}
      Please make sure that docker is installed and running
      {{else}}
      Please make sure that terraform have been installed
      https://github.com/hashicorp/terraform
      {{end}}

version: '3'

vars:
  TASK_RUNTIME:
    sh: echo "${TASK_RUNTIME:-devbox}"
  TFLINT_IMAGE_TAG: "v0.51.1"
  TERRASCAN_IMAGE_TAG: "1.18.11"
  TERRAFORM_IMAGE_TAG: "1.8.3"

tasks:
  init:
    summary: |
      Initialize a new or existing Terraform working directory by creating
      initial files, loading any remote state, downloading modules, etc.

      Task supports following vars:
      . TASK_RUNTIME (optional) - [docker/devbox(default)]
      . GLOBAL_FLAGS (optional) - Terraform global options
      . FLAGS        (optional) - Terraform init options

      Usage:
      ---
      includes:
        terraform:
          taskfile: https://raw.githubusercontent.com/saydulaev/taskfile/main/terraform/Taskfile.yml
          internal: true

      tasks:
        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic:
          desc: "Basic"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '-backend=false'
                TASK_RUNTIME: devbox

        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}*:
          desc: "Wildcard call"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '{{`{{.MATCH | join " "}}`}}'
                TASK_RUNTIME: devbox

      Examples:
        # basic
        task root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic

        # wildcard
        task "root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}} -migrate-state -reconfigure"
    desc: terraform init
    silent: true
    preconditions:
      - *TASK_RUNTIME_VAR
    cmds:
      - >
        {{if eq .TASK_RUNTIME "docker"}}
        docker run -v {{.USER_WORKING_DIR}}:/project
        -t hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}}
        -chdir=/project {{.GLOBAL_FLAGS}} init{{.FLAGS}}
        {{else}}
        terraform
        {{if .GLOBAL_FLAGS}}{{.GLOBAL_FLAGS}}{{else}}-chdir={{.USER_WORKING_DIR}}{{end}}
        init {{.FLAGS}}
        {{end}}

  plan:
    summary: |
      Generates a speculative execution plan, showing what actions Terraform
      would take to apply the current configuration. This command will not
      actually perform the planned actions.

      Task supports following vars:
      . TASK_RUNTIME (optional) - [docker/devbox(default)]
      . GLOBAL_FLAGS (optional) - Terraform global options
      . FLAGS        (optional) - Terraform plan options

      Usage:
      ---
      includes:
        terraform:
          taskfile: https://raw.githubusercontent.com/saydulaev/taskfile/main/terraform/Taskfile.yml
          internal: true

      tasks:
        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic:
          desc: "Basic"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '-var-file=filename'
                TASK_RUNTIME: devbox

        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}*:
          desc: "Wildcard call"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '{{`{{.MATCH | join " "}}`}}'
                TASK_RUNTIME: devbox

      Examples:
        # basic
        task root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic

        # wildcard
        task "root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}} -var-file=filename"
    desc: terraform plan
    silent: true
    preconditions:
      - *TASK_RUNTIME_VAR
    cmds:
      - >
        {{if eq .TASK_RUNTIME "docker"}}
        docker run -v {{.USER_WORKING_DIR}}:/project
        -t hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}}
         -chdir=/project {{.GLOBAL_FLAGS}} plan {{.FLAGS}}
        {{else}}
        terraform {{.GLOBAL_FLAGS}} plan {{.FLAGS}}
        {{end}}

  apply:
    summary: |
      Creates or updates infrastructure according to Terraform configuration
      files in the current directory.

      Task supports following vars:
      . TASK_RUNTIME (optional) - [docker/devbox(default)]
      . GLOBAL_FLAGS (optional) - Terraform global options
      . FLAGS        (optional) - Terraform apply options

      Usage:
      ---
      includes:
        terraform:
          taskfile: https://raw.githubusercontent.com/saydulaev/taskfile/main/terraform/Taskfile.yml
          internal: true

      tasks:
        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic:
          desc: "Basic"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '-compact-warnings'
                TASK_RUNTIME: devbox

        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}*:
          desc: "Wildcard call"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '{{`{{.MATCH | join " "}}`}}'
                TASK_RUNTIME: devbox

      Examples:
        # basic
        task root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic

        # wildcard
        task "root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}} -compact-warnings"
    desc: terraform apply -auto-approve
    silent: true
    preconditions:
      - *TASK_RUNTIME_VAR
    cmds:
      - >
        {{if eq .TASK_RUNTIME "docker"}}
        docker run -v {{.USER_WORKING_DIR}}:/project
        -t hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}}
        -chdir=/project {{.GLOBAL_FLAGS}} apply -auto-approve{{.FLAGS}}
        {{else}}
        terraform {{.GLOBAL_FLAGS}} apply -auto-approve {{.FLAGS}}
        {{end}}

  destroy:
    summary: |
      Destroy Terraform-managed infrastructure.

      Task supports following vars:
      . TASK_RUNTIME (optional) - [docker/devbox(default)]
      . GLOBAL_FLAGS (optional) - Terraform global options
      . FLAGS        (optional) - Terraform apply options

      Usage:
      ---
      includes:
        terraform:
          taskfile: https://raw.githubusercontent.com/saydulaev/taskfile/main/terraform/Taskfile.yml
          internal: true

      tasks:
        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic:
          desc: "Basic"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '-var-file=filename'
                TASK_RUNTIME: devbox

        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}*:
          desc: "Wildcard call"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '{{`{{.MATCH | join " "}}`}}'
                TASK_RUNTIME: devbox

      Examples:
        # basic
        task root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic

        # wildcard
        task "root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}} -var-file=filename"
    desc: terraform destroy
    silent: true
    prompt: |
      Exucute terraform destroy could be dangerous
      Do you want to continue?
    preconditions:
      - *TASK_RUNTIME_VAR
    cmds:
      - >
        {{if eq .TASK_RUNTIME "docker"}}
        docker run -v {{.USER_WORKING_DIR}}:/project hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}}
         -chdir=/project {{.GLOBAL_FLAGS}} destroy -auto-approve {{.FLAGS}}
        {{else}}
        terraform {{.GLOBAL_FLAGS}} destroy -auto-approve {{.FLAGS}}
        {{end}}

  fmt:
    summary: |
      Rewrites all Terraform configuration files to a canonical format. All
      configuration files (.tf), variables files (.tfvars), and testing files
      (.tftest.hcl) are updated. JSON files (.tf.json, .tfvars.json, or
      .tftest.json) are not modified.

      Task supports following vars:
      . TASK_RUNTIME (optional) - [docker/devbox(default)]
      . GLOBAL_FLAGS (optional) - Terraform global options
      . FLAGS        (optional) - Terraform fmt options
      . TARGET       (optional) - Directory/file path if not defined will be used work dir

      Usage:
      ---
      includes:
        terraform:
          taskfile: https://raw.githubusercontent.com/saydulaev/taskfile/main/terraform/Taskfile.yml
          internal: true

      tasks:
        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic:
          desc: "Basic"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '-var-file=filename'
                TASK_RUNTIME: devbox

        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}*:
          desc: "Wildcard call"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '{{`{{.MATCH | join " "}}`}}'
                TASK_RUNTIME: devbox

      Examples:
        # basic
        task root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic

        # wildcard
        task "root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}} -var-file=filename"
    desc: terraform fmt
    silent: true
    preconditions:
      - *TASK_RUNTIME_VAR
    cmds:
      - >
        {{if eq .TASK_RUNTIME "docker"}}
        docker run -v {{.USER_WORKING_DIR}}:/project hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}}
        -chdir=/project {{.GLOBAL_FLAGS}} init{{.FLAGS}} /project
        {{else}}
        terraform {{.GLOBAL_FLAGS}} fmt {{.FLAGS}}
        {{if .TARGET}}{{.TARGET}}{{else}}{{.USER_WORKING_DIR}}{{end}}
        {{end}}

  validate:
    summary: |
      Validate the configuration files in a directory, referring only to the
      configuration and not accessing any remote services such as remote state,
      provider APIs, etc.

      Task supports following vars:
      . TASK_RUNTIME (optional) - [docker/devbox(default)]
      . GLOBAL_FLAGS (optional) - Terraform global options
      . FLAGS        (optional) - Terraform apply options

      Usage:
      ---
      includes:
        terraform:
          taskfile: https://raw.githubusercontent.com/saydulaev/taskfile/main/terraform/Taskfile.yml
          internal: true

      tasks:
        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic:
          desc: "Basic"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '-lock-timeout=0s'
                FLAGS: '-json -no-color'
                TASK_RUNTIME: devbox

        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}*:
          desc: "Wildcard call"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                FLAGS: '{{`{{.MATCH | join " "}}`}}'
                TASK_RUNTIME: devbox

      Examples:
        # basic
        task root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic

        # wildcard
        task "root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}} -json -no-color"
    desc: terraform validate
    silent: true
    preconditions:
      - *TASK_RUNTIME_VAR
    cmds:
      - >
        {{if eq .TASK_RUNTIME "docker"}}
        docker run -v {{.USER_WORKING_DIR}}:/project hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}}
        -chdir=/project {{.GLOBAL_FLAGS}} validate{{.FLAGS}} /project
        {{else}}
        terraform {{.GLOBAL_FLAGS}} validate {{.FLAGS}}
        {{end}}

  doc:
    summary: |
      A utility to generate documentation from Terraform modules in various output formats

      Task supports following vars:
      . TASK_RUNTIME (optional) - [docker/devbox(default)]
      . COMMAND      (optional) - define terraform-docs command. Default 'markdown table'
      . FLAGS        (optional) - define terraform-docs flags. Default '--output-file README.md'

      Usage:
      ---
      includes:
        terraform:
          taskfile: https://raw.githubusercontent.com/saydulaev/taskfile/main/terraform/Taskfile.yml
          internal: true

      tasks:
        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic:
          desc: "Basic"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                COMMAND: asciidoc document
                FLAGS: '--output-mode=replace --output-file README.md'
                TASK_RUNTIME: devbox

        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}*:
          desc: "Wildcard call"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                COMMAND: 'asciidoc document'
                FLAGS: '{{`{{.MATCH | join " "}}`}}'
                TASK_RUNTIME: devbox

      Examples:
        # basic
        task root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic

        # wildcard
        task "root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}} --output-mode=replace --output-file README.md"
    desc: terraform-docs markdown table
    silent: true
    preconditions:
      - *TASK_RUNTIME_VAR
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which terraform-docs{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that terraform-docs have been installed
          https://github.com/terraform-docs/terraform-docs/
          {{end}}
    cmds:
      - >
        {{if eq .TASK_RUNTIME "docker"}}
        docker run -v{{.USER_WORKING_DIR}}:/project hashicorp/terraform:{{.TERRAFORM_IMAGE_TAG}}
        -chdir=/project {{.GLOBAL_OPTIONS}} terraform-docs
        {{if .COMMAND}}{{.COMMAND}}{{else}}markdown table{{end}}
        {{.FLAGS}} /project
        {{else}}
        terraform-docs
        {{if .COMMAND}}{{.COMMAND}}{{else}}markdown table{{end}}
        {{.FLAGS}} {{.USER_WORKING_DIR}}
        {{end}}

  terrascan-init:
    summary: |
      Initializes Terrascan and clones policies from the Terrascan GitHub repository

      Task supports following vars:
      . TASK_RUNTIME (optional) - [docker/devbox(default)]
    desc: terrascan init
    preconditions:
      - *TASK_RUNTIME_VAR
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which terrascan{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that terrascan have been installed
          https://github.com/tenable/terrascan
          {{end}}
    internal: true
    cmds:
      - >
        {{if eq .TASK_RUNTIME "docker"}}
        docker run -v {{.USER_WORKING_DIR}}:/project
        -t tenable/terrascan:{{.TERRASCAN_IMAGE_TAG}} {{.COMMAND}} {{.FLAGS}} /project
        {{else}}
        terrascan {{.COMMAND}} {{.FLAGS}} {{.USER_WORKING_DIR}}
        {{end}}

  terrascan:
    summary: |
      Detect compliance and security violations across Infrastructure as Code
      to mitigate risk before provisioning cloud native infrastructure.
      For more information, please visit https://runterrascan.io/

      Task supports following vars:
      . TASK_RUNTIME (optional) - [docker/devbox(default)]
      . GLOBAL_FLAGS (optional) - Terrascan global options
      . FLAGS        (optional) - Terrascan scan options

      Usage:
      ---
      includes:
        terraform:
          taskfile: https://raw.githubusercontent.com/saydulaev/taskfile/main/terraform/Taskfile.yml
          internal: true

      tasks:
        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic:
          desc: "Basic"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '--log-level warn'
                FLAGS: '--config-only --non-recursive'
                TASK_RUNTIME: devbox

        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}*:
          desc: "Wildcard call"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                GLOBAL_FLAGS: '--log-level warn'
                FLAGS: '{{`{{.MATCH | join " "}}`}}'
                TASK_RUNTIME: devbox

      Examples:
        # basic
        task root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic

        # wildcard
        task "root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}} --config-only --non-recursive"
    desc: Terrascan static code analyzer
    preconditions:
      - *TASK_RUNTIME_VAR
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which terrascan{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that terrascan have been installed
          https://github.com/tenable/terrascan
          {{end}}
    cmds:
      - task: terrascan-init
        vars:
          TASK_RUNTIME: '{{.TASK_RUNTIME}}'
      - >
        {{if eq .TASK_RUNTIME "docker"}}
        docker run -v {{.USER_WORKING_DIR}}:/project tenable/terrascan:{{.TERRASCAN_IMAGE_TAG}} scan {{.GLOBAL_FLAGS}} {{.FLAGS}} /project
        {{else}}
        terrascan scan {{.GLOBAL_FLAGS}} {{.FLAGS}} {{.USER_WORKING_DIR}}
        {{end}}

  tflint:
    summary: |
      Run terraform linting by tflint

      Task supports following vars:
      . TASK_RUNTIME (optional) - [docker/devbox(default)]
      . FLAGS        (optional) - tflint options
      . TARGET       (optional) - Directory/file path if not defined will be used work dir

      Usage:
      ---
      includes:
        terraform:
          taskfile: https://raw.githubusercontent.com/saydulaev/taskfile/main/terraform/Taskfile.yml
          internal: true

      tasks:
        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic:
          desc: "Basic"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                FLAGS: '--format=junit --recursive'
                TASK_RUNTIME: devbox

        root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}*:
          desc: "Wildcard call"
          cmds:
            - task: {{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join ":"}}{{else}}{{.TASK}}{{end}}
              vars:
                FLAGS: '{{`{{.MATCH | join " "}}`}}'
                TASK_RUNTIME: devbox

      Examples:
        # basic
        task root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}}-basic

        # wildcard
        task "root:{{if gt (len (splitList ":" .TASK)) 2}}{{slice (splitList ":" .TASK) 1 | join "-"}}{{else}}{{.TASK}}{{end}} --format=junit --recursive"
    desc: tflint
    preconditions:
      - *TASK_RUNTIME_VAR
      - sh: '{{if eq .TASK_RUNTIME "docker"}}which docker && docker ps{{else}}which tflint{{end}}'
        msg: |
          {{if eq .TASK_RUNTIME "docker"}}
          Please make sure that docker is installed and running
          {{else}}
          Please make sure that tflint have been installed
          https://github.com/terraform-linters/tflint
          {{end}}
    cmds:
      - >
        {{if eq .TASK_RUNTIME "docker"}}
        docker run --rm -v {{.USER_WORKING_DIR}}:/project
        -t ghcr.io/terraform-linters/tflint:{{.TFLINT_IMAGE_TAG}}
        {{if .FLAGS}}{{.FLAGS}}{{else}}--chdir=/project{{end}}
        {{else}}
        tflint {{if .FLAGS}}{{.FLAGS}}{{else}}--chdir={{.USER_WORKING_DIR}}{{end}}
        {{end}}
